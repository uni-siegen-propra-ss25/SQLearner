// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

/// User roles in the system
enum Role {
  STUDENT
  TUTOR
  ADMIN
}

/// Types of exercises supported
enum ExerciseType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  SQL_QUERY
  FREETEXT
}

/// Difficulty levels for exercises
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// Models

/// Application users
model User {
  id           Int       @id @default(autoincrement())
  
  matriculationNumber String? @unique
  email        String    @unique
  password     String
  firstName    String
  lastName     String

  role         Role   @default(STUDENT)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  submissions  Submission[]
  progress     Progress[]
  bookmarks    Bookmark[]

  Database Database[]
}

/// Imported or self-created database definitions
model Database {
  id          Int       @id @default(autoincrement())
  name        String
  description String?

  schemaSql   String?    // original SQL dump - full CREATE TABLE / INSERT statements

  // TODO: check if this is needed
  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  exercises   Exercise[]
}


/// Top-level grouping of chapters (e.g. “Relational Algebra”, “Joins”)
model TopicBlock {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  order       Int        @default(0)

  chapters    Chapter[]
}

/// Subdivision innerhalb eines TopicBlocks (z.B. “JOIN variants”)
model Chapter {
  id           Int          @id @default(autoincrement())
  topicBlockId Int  
  title        String
  description  String?
  order        Int          @default(0)

  topicBlock   TopicBlock   @relation(fields: [topicBlockId], references: [id])
  exercises    Exercise[]
}

/// Core exercise entity
model Exercise {
  id              Int             @id @default(autoincrement())
  chapterId       Int
  title           String
  description     String
  type            ExerciseType
  difficulty      Difficulty      @default(MEDIUM)

  database        Database?       @relation(fields: [databaseId], references: [id])
  databaseId      Int?            // only for SQL_QUERY

  isGenerated     Boolean         @default(false)
  generationPrompt String?        // prompt used if auto-generated
  llmPrompt       String?         // fixed prompt to send for feedback
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  chapter         Chapter         @relation(fields: [chapterId], references: [id])
  options         ChoiceOption[]
  submissions     Submission[]
  bookmarks       Bookmark[]

  Progress Progress[]
}

/// Single/Multiple-Choice options
model ChoiceOption {
  id          Int    @id @default(autoincrement())
  exerciseId  Int
  text        String
  isCorrect   Boolean   @default(false)

  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
}

/// A student’s submission on an exercise
model Submission {
  id             Int      @id @default(autoincrement())

  userId         Int
  exerciseId     Int

  answerText     String      // SQL text, chosen option IDs, or free text
  isCorrect      Boolean     @default(false)
  feedback       String?     // LLM-generated feedback
  createdAt      DateTime    @default(now())

  user          User      @relation(fields: [userId], references: [id])
  exercise      Exercise  @relation(fields: [exerciseId], references: [id])

  session        DbSession?
}

/// Isolated DB session/container for SQL execution
model DbSession {
  id            Int      @id @default(autoincrement())
  submissionId  Int      @unique
  containerId   String      // e.g. Docker container name or ID
  status        String      // “running” | “finished” | “failed”
  startedAt     DateTime    @default(now())
  endedAt       DateTime?

  submission    Submission  @relation(fields: [submissionId], references: [id])
}

/// Bookmark that a user sets on an exercise to revisit later
model Bookmark {
  id          Int       @id @default(autoincrement())
  userId      Int
  exerciseId  Int
  createdAt   DateTime   @default(now())

  user        User       @relation(fields: [userId], references: [id])
  exercise    Exercise   @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}

/// Track each student’s progress per exercise
model Progress {
  id            Int       @id @default(autoincrement())
  userId        Int
  exerciseId    Int
  attempts      Int        @default(0)
  lastAttemptAt DateTime   @updatedAt

  user          User       @relation(fields: [userId], references: [id])
  exercise      Exercise   @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}
