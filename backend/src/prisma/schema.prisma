// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

/// User roles in the system
enum Role {
  STUDENT
  TUTOR
  ADMIN
}

/// Types of exercises supported
enum ExerciseType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  QUERY
  FREETEXT
}

/// Difficulty levels for exercises
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

/// Message sender type
enum MessageSender {
  user
  assistant
}

/// Container status type
enum ContainerStatus {
  CREATING    // Initial setup
  RUNNING     // Ready for queries
  FAILED      // Error occurred
  FINISHED    // Task completed
  RESTARTING  // Being reset
}

/// Container health status
enum ContainerHealth {
  HEALTHY     // Container is functioning properly
  UNHEALTHY   // Container has health check failures
  STARTING    // Container is initializing
  UNKNOWN     // Health status cannot be determined
}

/// Application users
model User {
  id                  Int          @id @default(autoincrement())  
  email               String       @unique
  password            String
  firstName           String
  lastName            String
  role                Role         @default(STUDENT)
  matriculationNumber String?      @unique

  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  submissions  Submission[]
  progress     Progress[]
  bookmarks    Bookmark[]

  Database Database[]
  messages ChatMessage[]
}

/// System settings for the application
model Settings {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  value       String   // JSON string for complex settings
  description String? 
}

/// Chat messages between users and the AI assistant
model ChatMessage {
  id        Int           @id @default(autoincrement())
  content   String
  sender    MessageSender
  userId    Int
  context   String?
  replyToId Int?

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo   ChatMessage?  @relation("ReplyToMessage", fields: [replyToId], references: [id])
  replies   ChatMessage[] @relation("ReplyToMessage")

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

/// Imported or self-created database definitions
model Database {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  schemaSql   String       // SQL schema definition
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  exercises   Exercise[]
}

/// Top-level grouping of chapters (e.g. "Relational Algebra", "Joins")
model Chapter {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  order       Int       @default(0)

  topics      Topic[]
}

/// Subdivision innerhalb eines Chapters (z.B. "JOIN variants")
model Topic {
  id          Int       @id @default(autoincrement())
  chapterId   Int
  title       String
  description String?
  order       Int       @default(0)

  chapter     Chapter   @relation(fields: [chapterId], references: [id])
  exercises   Exercise[]
}

/// Isolated DB session/container for SQL execution
model DbSession {
  id            Int             @id @default(autoincrement())
  containerId   String         // Docker container ID
  status        ContainerStatus @default(CREATING)
  startedAt     DateTime       @default(now())
  endedAt       DateTime?
  
  // Essential container details
  port          Int?          // Assigned database port
  host          String?       // Container host address
  dbUser        String?       // Database credentials
  dbPassword    String?
  
  // Relations
  exerciseId    Int           // Exercise for initialization
  userId        Int           // Session owner
  
  // Error tracking
  lastError     String?       // Last error message
  restartCount  Int          @default(0)
  
  // Cleanup
  autoRemove    Boolean      @default(true)
  timeoutMins   Int         @default(60)

  // Relations
  exercise      Exercise      @relation(fields: [exerciseId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  // Essential indexes
  @@index([containerId])
  @@index([userId])
  @@index([status])
  
  // Ensure user can only have one active session per exercise
  @@unique([userId, exerciseId])
}

/// Core exercise entity
model Exercise {
  id              Int             @id @default(autoincrement())
  topicId         Int
  title           String
  description     String
  type            ExerciseType
  difficulty      Difficulty      @default(MEDIUM)
  order           Int             @default(0)

  database        Database?       @relation(fields: [databaseId], references: [id])
  databaseId      Int?            // only for SQL_QUERY
  querySolution   String?         // Direct SQL solution for SQL_QUERY type

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  topic           Topic           @relation(fields: [topicId], references: [id])
  answers         AnswerOption[]  @relation("ExerciseAnswers")
  bookmarks       Bookmark[]
  Progress        Progress[]
  dbSessions      DbSession[]     // Add relation to DbSession
}

/// Single/Multiple-Choice options
model AnswerOption {
  id          Int       @id @default(autoincrement())
  exerciseId  Int
  text        String
  isCorrect   Boolean   @default(false)
  order       Int       @default(0)

  exercise    Exercise  @relation("ExerciseAnswers", fields: [exerciseId], references: [id])
}

/// Bookmark that a user sets on an exercise to revisit later
model Bookmark {
  id          Int       @id @default(autoincrement())
  userId      Int
  exerciseId  Int
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}

/// Track each student's progress per exercise
model Progress {
  id            Int       @id @default(autoincrement())
  userId        Int
  exerciseId    Int
  attempts      Int       @default(0)
  lastAttemptAt DateTime  @updatedAt

  isPassed      Boolean   @default(false)
  passedAt      DateTime? 

  user          User      @relation(fields: [userId], references: [id])
  exercise      Exercise  @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
}

model fragen {
  id              Int      @id @default(autoincrement())
  student_name    String
  frage           String
  antwort         String?
  antwort_von     String?
  erstellt_am     DateTime @db.Timestamp(6)
  ist_archiviert  Boolean
  ist_angepinnt   Boolean
  ist_geloescht   Boolean
  ist_beantwortet Boolean
}

model hint {
  id   Int    @id @default(autoincrement())
  text String
}

model todos {
  id   Int     @id @default(autoincrement())
  text String
  done Boolean @default(false)
  role String?
}
